import com.github.mgk.gradle.S3Upload
import org.gradle.internal.jvm.Jvm

import java.time.Instant
import java.time.ZoneId

buildscript {
    dependencies {
        classpath group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
        classpath group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
        classpath group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
        classpath group: 'javax.activation', name: 'activation', version: '1.1.1'
    }
}

plugins {
    id "java"
    id "checkstyle"
    id "co.riiid.gradle" version "0.4.2"
    id "com.github.mgk.gradle.s3" version "1.4.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Host: " + InetAddress.getLocalHost()
println "Gradle: " + gradle.gradleVersion + " JVM: " + Jvm.current() + " Groovy: " + GroovySystem.getVersion()
println "Build: group: '${project.group}', name: '${project.name}', version: '${project.version}'"
println "Timestamp: " + Instant.now().atZone(ZoneId.systemDefault()).toString()

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    versions = [
            "elasticsearch": version.replaceAll(/\.[0-9]+(|-SNAPSHOT)$/, ""),
            "gson"         : "2.3.1",
            "log4j"        : "2.11.2",
            "junit"        : "5.4.2",
            "assertj"        : "3.12.2",
    ]
}

configurations {
    releaseJars {
        extendsFrom runtime
        exclude group: "org.elasticsearch"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "org.apache.logging.log4j"
    }
}

dependencies {
    implementation "org.elasticsearch:elasticsearch:${versions.elasticsearch}"
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit}"
    testImplementation "org.assertj:assertj-core:${versions.assetj}"
    releaseJars "${project.group}:${project.name}:${project.version}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked,deprecation"
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into "build/tmp"
    classifier "javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into "build/tmp/sources"
    classifier "sources"
}

task copyPluginFiles(type: Copy) {
    from "src/main/templates"
    into "build/tmp/plugin"
    expand([
            "descriptor": [
                    "name"                : pluginName,
                    "classname"           : pluginClassname,
                    "description"         : pluginDescription,
                    "version"             : project.property("version"),
                    "javaVersion"         : project.property("targetCompatibility"),
                    "elasticsearchVersion": versions.elasticsearch
            ]
    ])
    outputs.upToDateWhen { false }
}

task buildPluginZip(type: Zip, dependsOn: [":jar", "copyPluginFiles"]) {
    from configurations.releaseJars
    from "build/tmp/plugin"
}

artifacts {
    archives javadocJar, sourcesJar, buildPluginZip
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = "8.2"
}

task S3Upload(type: S3Upload, dependsOn: buildPluginZip) {
    bucket = s3_bucket
    key = "elasticsearch/${project.name}-${version}.zip"
    file = "build/distributions/${project.name}-${version}.zip"
}

github {
    owner = github_owner
    repo = github_repo
    token = github_token
    tagName = version
    targetCommitish = "master"
    name = version
    assets = [
            "build/distributions/${project.name}-${version}.zip"
    ]
}

githubRelease {
    dependsOn("buildPluginZip")
    mustRunAfter("S3Upload")
}

task release() {
    if (version.endsWith("-SNAPSHOT")) {
        doLast {
            println("SNAPSHOT: Nothing to release !")
        }
    } else {
        dependsOn(["S3Upload", "githubRelease"])
    }
}
